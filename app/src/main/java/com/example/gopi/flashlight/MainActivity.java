package com.example.gopi.flashlight;import android.content.Context;import android.content.SharedPreferences;import android.graphics.Camera;import android.hardware.Sensor;import android.hardware.SensorEvent;import android.hardware.SensorEventListener;import android.hardware.SensorManager;import android.hardware.camera2.CameraAccessException;import android.hardware.camera2.CameraCharacteristics;import android.hardware.camera2.CameraManager;import android.os.Build;import android.preference.PreferenceManager;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.view.View;import android.widget.Button;import android.widget.TextView;import android.widget.Toast;public class MainActivity extends AppCompatActivity implements SensorEventListener {    CameraManager mCameraManager;    SensorManager sensorManager;    Sensor accelerometer;    private long lastUpdate = 0;    private float last_x, last_y, last_z;    private static final int SHAKE_THRESHOLD = 1000;    private boolean isTorchEnabled = true;    private int count = 0;    TextView textView;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        Button on = findViewById(R.id.torch);        Button off = findViewById(R.id.google);        textView = findViewById(R.id.textView);        mCameraManager = (CameraManager) getSystemService(CAMERA_SERVICE);        sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);        accelerometer = sensorManager.getDefaultSensor(Sensor.TYPE_LINEAR_ACCELERATION);        sensorManager.registerListener(this, accelerometer, SensorManager.SENSOR_DELAY_NORMAL);        on.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                try {                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                        mCameraManager.setTorchMode("0", true);                        count = 0;                        textView.setText(count + "");                    }                } catch (CameraAccessException e) {                    e.printStackTrace();                }            }        });        off.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                try {                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                        mCameraManager.setTorchMode("0", false);                        count = 0;                        textView.setText(count + "");                    }                } catch (CameraAccessException e) {                    e.printStackTrace();                }            }        });    }    @Override    protected void onPause() {        super.onPause();        sensorManager.registerListener(this, accelerometer, SensorManager.SENSOR_DELAY_NORMAL);    }    @Override    public void onSensorChanged(SensorEvent event) {        Sensor sensor = event.sensor;        if (sensor.getType() == Sensor.TYPE_LINEAR_ACCELERATION) {            float x = event.values[0];            float y = event.values[1];            float z = event.values[2];            long curTime = System.currentTimeMillis();            if ((curTime - lastUpdate) > 100) {                long diffTime = (curTime - lastUpdate);                lastUpdate = curTime;                float speed = Math.abs(x + y + z - last_x - last_y - last_z) / diffTime * 10000;                if (/*speed > SHAKE_THRESHOLD &&*/ x > 7) {                    try {                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                            if (isTorchEnabled) {                                count++;                                if (count == 4) {                                    mCameraManager.setTorchMode("0", isTorchEnabled);                                    isTorchEnabled = false;                                    count = 0;                                }                                textView.setText(count + "");                            } else {                                count++;                                if (count == 4) {                                    mCameraManager.setTorchMode("0", isTorchEnabled);                                    isTorchEnabled = true;                                    count = 0;                                }                                textView.setText(count + "");                            }                        }                    } catch (CameraAccessException e) {                        e.printStackTrace();                    }                }                last_x = x;                last_y = y;                last_z = z;            }        }    }    @Override    public void onAccuracyChanged(Sensor sensor, int accuracy) {    }}